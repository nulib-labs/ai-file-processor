{
  "Comment": "AI File Processor - Process files in parallel using Bedrock with Distributed Map",
  "StartAt": "StoreContext",
  "States": {
    "StoreContext": {
      "Type": "Pass",
      "Parameters": {
        "context": {
          "directory_path.$": "$.directory_path",
          "output_bucket.$": "$.output_bucket",
          "batch_file_key.$": "$.batch_file_key"
        },
        "batch_file_key.$": "$.batch_file_key",
        "output_bucket.$": "$.output_bucket",
        "directory_path.$": "$.directory_path"
      },
      "Next": "ProcessFiles"
    },
    "ProcessFiles": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "ProcessSingleFile",
        "States": {
          "ProcessSingleFile": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${WorkerFunctionArn}",
              "Payload": {
                "record.$": "$.item",
                "output_bucket.$": "$.outputBucket",
                "directory_path.$": "$.directoryPath"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException", 
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 3,
                "BackoffRate": 2.0,
                "JitterStrategy": "FULL"
              }
            ],
            "End": true
          }
        }
      },
      "ItemReader": {
        "Resource": "arn:aws:states:::s3:getObject",
        "ReaderConfig": {
          "InputType": "JSON"
        },
        "Parameters": {
          "Bucket.$": "$.output_bucket",
          "Key.$": "$.batch_file_key"
        }
      },
      "Parameters": {"outputBucket.$": "$.output_bucket", "directoryPath.$": "$.directory_path", "item.$": "$$.Map.Item.Value"},
      "MaxConcurrency": ${MaxConcurrency},
      "Label": "ProcessFiles",
      "ResultPath": "$.mapResults",
      "Next": "UpdateStatusSuccess",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "UpdateStatusError",
          "ResultPath": "$.Error"
        }
      ]
    },
    "UpdateStatusSuccess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${StatusUpdateFunctionArn}",
        "Payload": {
          "directory_path.$": "$.context.directory_path",
          "status": "completed",
          "message": "All files processed successfully",
          "execution_arn.$": "$$.Execution.Name"
        }
      },
      "End": true
    },
    "UpdateStatusError": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${StatusUpdateFunctionArn}",
        "Payload": {
          "directory_path.$": "$.context.directory_path",
          "status": "error",
          "message": "Processing failed",
          "error.$": "$.Error",
          "execution_arn.$": "$$.Execution.Name"
        }
      },
      "End": true
    }
  }
}